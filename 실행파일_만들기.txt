콘솔창이 출력되지 않게 하려면 아래와 같이 명령어에 '-w' 또는 '--windowed'를 추가해줍니다.

pyinstaller -w qtextbrowser_advanced.py



You can still use pyinstaller by adding the following to your command:

--hidden-import sklearn.neighbors.typedefs


or by adding the following to your .spec file:

hiddenimports=['cython', 'sklearn', 'sklearn.neighbors.typedefs']



C:\Users\ceo\anaconda3\envs\py35forai


pyinstaller -F -n stock_trend_line.exe c:\Users\ceo\Desktop\deep_learn_rnn\08_01_sklearn_LinearRegression.py



pyinstaller -F -n stock_trend_line.exe c:\Users\ceo\Desktop\stoh\08_03_sklearn_linear_poly_regression.py --hidden-import sklearn.neighbors.typedefs
pyinstaller -F -n stock_trend_line_month.exe c:\Users\ceo\Desktop\stoh\stock_trend_line_month.py --hidden-import sklearn.neighbors.typedefs


pyinstaller -F -n stock_trend_line_view.exe c:\Users\ceo\Desktop\deep_learn_rnn\08_03_sklearn_linear_poly_regression.py --hidden-import sklearn.neighbors.typedefs




파이썬에서 외부 파일을 실행하기 위해서 많이들 사용하는 명령어들 입니다.
- os.system("실행할 파일")
- os.popen("실행할 파일")
- subprocess.call("실행할 파일")

이 3가지 중 os 모듈을 이용하는 것은 실행한 파일이 종료되기 전까지는 계속 메모리에 상주합니다.
os.system과 os.popen은 cmd에서 명령어를 입력하는 것과 같은 동작을 해줍니다.
즉, "실행할 파일"을 구동시키게 되면 실행된 것들의 프로세싱이 끝나기 전 까지는 프로세스로서 cmd.exe가 메모리에 상주하게됩니다.

subprocess만이 cmd를 통하지 않고 바로 실행을 시켜주지만 여전히 "실행할 파일"은 본인을 실행시킨 프로세스에 자식 프로세스로 귀속이 됩니다.
만약 내가 어떤 외부 파일을 실행하고자할때 잠깐 구동되고 종료되는 거라면야 뭐 cmd도 같이 종료가 되니 크게 문제될 것은 없겠지만 위와 같이 아예 창을 띄우는 프로그램을 구동시켜야 하는 경우에는 얘기가 달라집니다. 창이 띄워져 있는 동안은 cmd도 같이 부모 프로세스로 메모리를 차지하기때문 입니다.
(subprocess 또한 cmd는 안 띄우지만 python.exe가 부모 프로세스로서 메모리를 차지하게 됩니다.)
